/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.models;

import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.RepositoryMovie;
import hr.algebra.model.Movie;
import hr.algebra.model.Person;
import hr.algebra.parsers.rss.Parser;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Komp
 */
public class UploadMovie extends javax.swing.JPanel {

    //REPO
    private DefaultListModel<Movie> movieModel;
    RepositoryMovie repositoryMovie;

    /**
     * Creates new form UploadMovie
     */
    public UploadMovie() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        btnDelete = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(756, 447));

        jList.setToolTipText("");
        jScrollPane.setViewportView(jList);

        btnDelete.setBackground(java.awt.Color.red);
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpload.setBackground(java.awt.Color.green);
        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        try {
            List<Movie> movies = Parser.parse();
            addToDataBase(movies);
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(UploadMovie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            deleteDataBaseData();
        } catch (Exception ex) {
            Logger.getLogger(UploadMovie.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpload;
    private javax.swing.JList<Movie> jList;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            repositoryMovie = RepositoryFactory.getMovieRepository();
            movieModel = new DefaultListModel<>();
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(UploadMovie.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(1);
        }
    }

    private void loadModel() throws Exception {
        List<Movie> movies = repositoryMovie.selectMovies();
        movieModel.clear();
        movies.forEach(movieModel::addElement);
        jList.setModel(movieModel);
    }

    private void addToDataBase(List<Movie> movies) throws Exception {  
        int id;
        for (Movie movie : movies) {

            id = repositoryMovie.createPerson(movie.getDirector());
            movie.getDirector().setId(id);

            if (movie.getActors() != null) {
                for (Person actor : movie.getActors()) {
                    id = repositoryMovie.createPerson(actor);
                    actor.setId(id);
                }
            }
            
            id = repositoryMovie.createMovie(movie);
            movie.setId(id);
            
            for (Person actor : movie.getActors()) {
                repositoryMovie.createMovieActor(actor, movie);
            }
        }

    }

    private void deleteDataBaseData() throws Exception {
        repositoryMovie.deleteMovies();
        FileUtils.deleteDirectory(new File("assets"));
        loadModel();
    }
}
